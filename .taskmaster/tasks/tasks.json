{
  "tags": {
    "master": {
      "name": "master",
      "description": "Main development tasks for Bithumb Auto Trading System",
      "createdAt": "2024-12-19T00:00:00Z",
      "tasks": [
        {
          "id": 1,
          "title": "프로젝트 기반 구조 설정",
          "description": "빗썸 자동매매 시스템의 기본 프로젝트 구조와 환경 설정",
          "status": "pending",
          "priority": "high",
          "dependencies": [],
          "details": "Python 3.11+ 환경에서 FastAPI 기반 백엔드 프로젝트 구조를 설정하고, 필요한 의존성 패키지들을 설치합니다.",
          "testStrategy": "프로젝트 구조가 올바르게 생성되고 모든 의존성이 정상적으로 설치되는지 확인",
          "subtasks": []
        },
        {
          "id": 2,
          "title": "빗썸 API 클라이언트 구현",
          "description": "빗썸 거래소 API와의 연동을 위한 클라이언트 구현",
          "status": "pending",
          "priority": "high",
          "dependencies": [1],
          "details": "빗썸의 Public API(시세 조회), Private API(거래), WebSocket(실시간 데이터) 연동을 구현합니다. HMAC-SHA512 서명, Rate Limit 처리, 에러 핸들링을 포함합니다.",
          "testStrategy": "빗썸 API 연결 테스트, 인증 확인, 실시간 데이터 수신 테스트",
          "subtasks": []
        },
        {
          "id": 3,
          "title": "데이터베이스 스키마 설계 및 구현",
          "description": "PostgreSQL, Redis, TimescaleDB를 활용한 데이터 저장 구조 설계",
          "status": "pending",
          "priority": "high",
          "dependencies": [1],
          "details": "사용자 정보, 거래 내역, 시장 데이터, 전략 설정 등을 저장할 데이터베이스 스키마를 설계하고 구현합니다.",
          "testStrategy": "데이터베이스 연결 테스트, 스키마 생성 확인, 샘플 데이터 삽입/조회 테스트",
          "subtasks": []
        },
        {
          "id": 4,
          "title": "실시간 데이터 수집 파이프라인 구축",
          "description": "WebSocket을 통한 실시간 시장 데이터 수집 및 저장 시스템",
          "status": "pending",
          "priority": "high",
          "dependencies": [2, 3],
          "details": "빗썸 WebSocket API를 통해 실시간 체결, 호가, 현재가 데이터를 수집하고 Redis에 캐싱, TimescaleDB에 저장하는 파이프라인을 구축합니다.",
          "testStrategy": "실시간 데이터 수집 정확성 확인, 데이터 손실 없음 검증, 성능 테스트",
          "subtasks": []
        },
        {
          "id": 5,
          "title": "기술적 분석 엔진 개발",
          "description": "다양한 기술적 지표와 패턴 인식을 위한 분석 엔진 구현",
          "status": "pending",
          "priority": "high",
          "dependencies": [4],
          "details": "이동평균선, 오실레이터, 변동성 지표, 볼륨 분석, 패턴 인식, 피보나치 분석 등 종합적인 기술적 분석 기능을 구현합니다.",
          "testStrategy": "각 지표의 정확성 검증, 백테스팅 데이터와 비교, 성능 최적화 확인",
          "subtasks": []
        },
        {
          "id": 6,
          "title": "스캘핑 전략 구현",
          "description": "Paul Rotter 스타일의 고빈도 스캘핑 전략 구현",
          "status": "pending",
          "priority": "medium",
          "dependencies": [5],
          "details": "1-5분 차트 분석, EMA 조합, 3pip 대기주문, 95% 승률 목표의 스캘핑 전략을 구현합니다.",
          "testStrategy": "백테스팅을 통한 전략 성과 검증, 리스크 관리 확인, 실시간 실행 테스트",
          "subtasks": []
        },
        {
          "id": 7,
          "title": "데이 트레이딩 전략 구현",
          "description": "Bull Flag, Gap Trading, Pivot Point 기반 데이 트레이딩 전략",
          "status": "pending",
          "priority": "medium",
          "dependencies": [5],
          "details": "H1 트렌드 + M15 진입, RSI/MACD 종합 신호를 활용한 데이 트레이딩 전략을 구현합니다.",
          "testStrategy": "패턴 인식 정확성 확인, 진입/청산 타이밍 검증, 수익성 분석",
          "subtasks": []
        },
        {
          "id": 8,
          "title": "스윙 트레이딩 전략 구현",
          "description": "피보나치 되돌림, MA Crossover 기반 스윙 트레이딩 전략",
          "status": "pending",
          "priority": "medium",
          "dependencies": [5],
          "details": "3일-6주 보유 기간의 스윙 트레이딩 전략으로 피보나치 되돌림, 지지/저항 반등 거래를 구현합니다.",
          "testStrategy": "장기 보유 전략 검증, 리스크 관리 확인, 포트폴리오 분산 효과 분석",
          "subtasks": []
        },
        {
          "id": 9,
          "title": "장기투자 전략 구현",
          "description": "DCA, 리밸런싱 기반 장기투자 전략",
          "status": "pending",
          "priority": "medium",
          "dependencies": [5],
          "details": "Dollar Cost Averaging, 정기 리밸런싱, 200일 이동평균 기준의 장기투자 전략을 구현합니다.",
          "testStrategy": "장기 수익성 분석, 리밸런싱 효과 검증, 리스크 관리 확인",
          "subtasks": []
        },
        {
          "id": 10,
          "title": "리스크 관리 시스템 구현",
          "description": "포지션 사이징, 손절/익절, 긴급 종료 등 리스크 관리 기능",
          "status": "pending",
          "priority": "high",
          "dependencies": [5],
          "details": "계좌의 1-2% 리스크 노출, Kelly Criterion, Stop Loss/Take Profit 관리, 긴급 종료 조건을 구현합니다.",
          "testStrategy": "리스크 계산 정확성 확인, 긴급 상황 대응 테스트, 손실 제한 효과 검증",
          "subtasks": []
        },
        {
          "id": 11,
          "title": "주문 실행 시스템 구현",
          "description": "빗썸 API를 통한 자동 주문 실행 및 관리 시스템",
          "status": "pending",
          "priority": "high",
          "dependencies": [2, 10],
          "details": "지정가/시장가 주문, 주문 취소, 체결 확인, 슬리피지 처리 등 주문 실행 로직을 구현합니다.",
          "testStrategy": "주문 실행 정확성 확인, 에러 처리 검증, 성능 테스트",
          "subtasks": []
        },
        {
          "id": 12,
          "title": "백테스팅 시스템 구현",
          "description": "과거 데이터 기반 전략 성과 검증 및 최적화 시스템",
          "status": "pending",
          "priority": "medium",
          "dependencies": [5, 10, 11],
          "details": "특정 기간 데이터로 전략 시뮬레이션, 성과 지표 계산, 시각화, 파라미터 최적화 기능을 구현합니다.",
          "testStrategy": "백테스팅 결과 정확성 확인, 성과 지표 검증, 최적화 알고리즘 테스트",
          "subtasks": []
        },
        {
          "id": 13,
          "title": "포트폴리오 관리 시스템 구현",
          "description": "잔고 조회, 포지션 관리, 성과 분석 기능",
          "status": "pending",
          "priority": "medium",
          "dependencies": [3, 11],
          "details": "실시간 잔고 조회, 포지션 모니터링, 거래 내역 관리, 성과 분석 대시보드를 구현합니다.",
          "testStrategy": "데이터 정확성 확인, 실시간 업데이트 테스트, 성과 계산 검증",
          "subtasks": []
        },
        {
          "id": 14,
          "title": "API 엔드포인트 구현",
          "description": "FastAPI 기반 RESTful API 엔드포인트 구현",
          "status": "pending",
          "priority": "high",
          "dependencies": [2, 3, 13],
          "details": "인증, 시장 데이터, 전략 관리, 포트폴리오, 주문 관리, 백테스팅, 모니터링 API를 구현합니다.",
          "testStrategy": "API 엔드포인트 테스트, 인증 확인, 데이터 검증, 성능 테스트",
          "subtasks": []
        },
        {
          "id": 15,
          "title": "모니터링 및 알림 시스템 구현",
          "description": "시스템 모니터링, 거래 알림, 성과 리포트 기능",
          "status": "pending",
          "priority": "medium",
          "dependencies": [14],
          "details": "Prometheus/Grafana 모니터링, Telegram 알림, 일일 리포트 자동 생성 기능을 구현합니다.",
          "testStrategy": "모니터링 데이터 정확성 확인, 알림 전송 테스트, 리포트 생성 검증",
          "subtasks": []
        }
      ]
    }
  },
  "currentTag": "master"
}